{"version":3,"file":"flipclock.min.js","sources":["../src/js/Helpers/Functions.js","../src/js/Helpers/Digitize.js","../src/js/Helpers/Value.js","../src/js/Helpers/Validate.js","../src/js/Helpers/Language.js","../src/js/Helpers/Translate.js","../src/js/Helpers/Template.js","../src/js/Themes/Original/Divider.js","../src/js/Themes/Original/FlipClock.js","../src/js/Themes/Original/Group.js","../src/js/Themes/Original/Label.js","../src/js/Themes/Original/List.js","../src/js/Themes/Original/ListItem.js","../src/js/Themes/Original/Faces/DayCounter.js","../src/js/Themes/Original/Faces/HourCounter.js","../src/js/Themes/Original/Faces/MinuteCounter.js","../src/js/Themes/Original/Faces/TwentyFourHourClock.js","../src/js/Themes/Original/Faces/TwelveHourClock.js","../src/js/Themes/Original/Faces/WeekCounter.js","../src/js/Themes/Original/Faces/YearCounter.js","../src/js/Components/Component.js","../src/js/Components/FaceValue.js","../src/js/Config/ConsoleMessages.js","../src/js/Components/Face.js","../src/js/Languages/ar-ar.js","../src/js/Languages/ca-es.js","../src/js/Languages/cs-cz.js","../src/js/Languages/da-dk.js","../src/js/Languages/de-de.js","../src/js/Languages/en-us.js","../src/js/Languages/es-es.js","../src/js/Languages/fa-ir.js","../src/js/Languages/fi-fi.js","../src/js/Languages/fr-ca.js","../src/js/Languages/he-il.js","../src/js/Languages/hu-hu.js","../src/js/Languages/it-it.js","../src/js/Languages/ja-jp.js","../src/js/Languages/ko-kr.js","../src/js/Languages/lv-lv.js","../src/js/Languages/nl-be.js","../src/js/Languages/no-nb.js","../src/js/Languages/pl-pl.js","../src/js/Languages/pt-br.js","../src/js/Languages/ro-ro.js","../src/js/Languages/ru-ru.js","../src/js/Languages/sk-sk.js","../src/js/Languages/sv-se.js","../src/js/Languages/th-th.js","../src/js/Languages/tr-tr.js","../src/js/Languages/ua-ua.js","../src/js/Languages/vn-vn.js","../src/js/Languages/zh-cn.js","../src/js/Languages/zh-tw.js","../src/js/Components/DomComponent.js","../src/js/Components/Divider.js","../src/js/Components/ListItem.js","../src/js/Components/List.js","../src/js/Components/Group.js","../src/js/Components/Label.js","../src/js/Components/Timer.js","../src/js/Faces/Counter.js","../src/js/Faces/MinuteCounter.js","../src/js/Faces/HourCounter.js","../src/js/Faces/DayCounter.js","../src/js/Faces/TwentyFourHourClock.js","../src/js/Faces/TwelveHourClock.js","../src/js/Faces/WeekCounter.js","../src/js/Faces/YearCounter.js","../src/js/Config/DefaultValues.js","../src/js/Themes/Original/index.js","../src/js/Components/FlipClock.js"],"sourcesContent":["/**\n * These are a collection of helper functions, some borrowed from Lodash,\n * Underscore, etc, to provide common functionality without the need for using\n * a dependency. All of this is an attempt to reduce the file size of the\n * library.\n *\n * @namespace Helpers.Functions\n */\n\n/**\n * Throw a string as an Error exception.\n *\n * @function error\n * @param  {string} string - The error message.\n * @return {void}\n * @memberof Helpers.Functions\n */\nexport function error(string) {\n    throw Error(string);\n}\n\n/**\n * Check if `fn` is a function, and call it with `this` context and pass the\n * arguments.\n *\n * @function callback\n * @param  {string} string - The callback fn.\n * @param  {...*} args - The arguments to pass.\n * @return {void}\n * @memberof Helpers.Functions\n */\nexport function callback(fn, ...args) {\n    if(isFunction(fn)) {\n        return fn.call(this, ...args);\n    }\n}\n\n/**\n * Round the value to the correct value. Takes into account negative numbers.\n *\n * @function round\n * @param  {value} string - The value to round.\n * @return {string} - The rounded value.\n * @memberof Helpers.Functions\n */\nexport function round(value) {\n    return isNegativeZero(\n        value = isNegative(value) ? Math.ceil(value) : Math.floor(value)\n    ) ? ('-' + value).toString() : value;\n}\n\n/**\n * Returns `true` if `undefined or `null`.\n *\n * @function noop\n * @param  {value} string - The value to check.\n * @return {boolean} - `true` if `undefined or `null`.\n * @memberof Helpers.Functions\n */\nexport function noop(value) {\n    return !isUndefined(value) && !isNull(value);\n}\n\n/**\n * Returns a function that executes the `before` attribute and passes that value\n * to `after` and the subsequent value is returned.\n *\n * @function chain\n * @param  {function} before - The first function to execute.\n * @param  {function} after - The subsequent function to execute.\n * @return {function} - A function that executes the chain.\n * @memberof Helpers.Functions\n */\nexport function chain(before, after) {\n    return () => after(before());\n}\n\n/**\n * Returns a function that returns maps the values before concatenating them.\n *\n * @function concatMap\n * @param  {function} fn - The map callback function.\n * @return {function} - A function that executes the map and concatenation.\n * @memberof Helpers.Functions\n */\nexport function concatMap(fn) {\n    return x => {\n        return x.map(fn).reduce((x, y) => x.concat(y), []);\n    }\n}\n\n/**\n * Flatten an array.\n *\n * @function flatten\n * @param  {array} value - The array to flatten.\n * @return {array} - The flattened array.\n * @memberof Helpers.Functions\n */\nexport function flatten(value) {\n    return concatMap(value => value)(value)\n}\n\n/**\n * Deep flatten an array.\n *\n * @function deepFlatten\n * @param  {array} value - The array to flatten.\n * @return {array} - The flattened array.\n * @memberof Helpers.Functions\n */\nexport function deepFlatten(x) {\n    return concatMap(x => Array.isArray(x) ? deepFlatten (x) : x)(x);\n}\n\n/**\n * Capitalize the first letter in a string.\n *\n * @function ucfirst\n * @param  {string} string - The string to capitalize.\n * @return {string} - The capitalized string.\n * @memberof Helpers.Functions\n */\nexport function ucfirst(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the length of a deep flatten array.\n *\n * @function length\n * @param  {array} value - The array to count.\n * @return {number} - The length of the deep flattened array.\n * @memberof Helpers.Functions\n */\nexport function length(value) {\n    return deepFlatten(value).length;\n}\n\n/**\n * Determines if a value is a negative zero.\n *\n * @function isNegativeZero\n * @param  {number} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a negative zero (`-0`).\n * @memberof Helpers.Functions\n */\nexport function isNegativeZero(value) {\n    return 1 / Math.round(value) === -Infinity;\n}\n\n/**\n * Determines if a value is a negative.\n *\n * @function isNegative\n * @param  {number} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a negative.\n * @memberof Helpers.Functions\n */\nexport function isNegative(value) {\n    return isNegativeZero(value) || value < 0;\n}\n\n/**\n * Determines if a value is `null`.\n *\n * @function isNull\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a `null`.\n * @memberof Helpers.Functions\n */\nexport function isNull(value) {\n    return value === null;// || typeof value === 'null';\n}\n\n/**\n * Determines if a value is `undefined`.\n *\n * @function isNull\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a `undefined`.\n * @memberof Helpers.Functions\n */\nexport function isUndefined(value) {\n    return typeof value === 'undefined';\n}\n\n/**\n * Determines if a value is a constructor.\n *\n * @function isConstructor\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a constructor.\n * @memberof Helpers.Functions\n */\nexport function isConstructor(value) {\n    return (value instanceof Function) && !!value.name;\n}\n\n/**\n * Determines if a value is a string.\n *\n * @function isString\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a string.\n * @memberof Helpers.Functions\n */\nexport function isString(value) {\n    return typeof value === 'string';\n}\n\n/**\n * Determines if a value is a array.\n *\n * @function isString\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a string.\n * @memberof Helpers.Functions\n */\nexport function isArray(value) {\n    return value instanceof Array;\n}\n\n/**\n * Determines if a value is an object.\n *\n * @function isObject\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is an object.\n * @memberof Helpers.Functions\n */\nexport function isObject(value) {\n    const type = typeof value;\n    return value != null && !isArray(value) && (\n        type == 'object' || type == 'function'\n    );\n}\n\n/**\n * Determines if a value is a function.\n *\n * @function isObject\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a function.\n * @memberof Helpers.Functions\n */\nexport function isFunction(value) {\n    return value instanceof Function;\n}\n\n/**\n * Determines if a value is a number.\n *\n * @function isObject\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a number.\n * @memberof Helpers.Functions\n */\nexport function isNumber(value) {\n    return !isNaN(value);\n}\n\n/**\n * Converts a string into kebab case.\n *\n * @function kebabCase\n * @param  {string} string - The string to convert.\n * @return {string} - The converted string.\n * @memberof Helpers.Functions\n */\nexport function kebabCase(string) {\n    return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\\s+/g, '-').toLowerCase();\n}\n","/**\n * @namespace Helpers.Digitize\n */\nimport { flatten } from './Functions';\nimport { deepFlatten } from './Functions';\n\n/**\n * Digitize a number, string, or an array into a digitized array. This function\n * use by the `Face`, which convert the digitized array into an array of `List`\n * instances.\n *\n * @function digitize\n * @param  {*} value - The value to digitize.\n * @param  {(Object|undefined)} [options] - The digitizer options.\n * @return {array} - The digitized array.\n * @memberof Helpers.Digitize\n */\nexport default function digitize(value, options) {\n    options = Object.assign({\n        minimumDigits: 0,\n        prependLeadingZero: true\n    }, options);\n\n    function prepend(number) {\n        const shouldPrependZero = options.prependLeadingZero &&\n            number.toString().split('').length === 1;\n\n        return (shouldPrependZero ? '0' : '').concat(number);\n    }\n\n    function digits(arr, min) {\n        const length = deepFlatten(arr).length;\n\n        if(length < min) {\n            for(let i = 0; i < min - length; i++) {\n                arr[0].unshift('0');\n            }\n        }\n\n        return arr;\n    }\n\n    return digits(flatten([value]).map(number => {\n        return flatten(deepFlatten([number]).map(number => {\n            return prepend(number).split('');\n        }));\n    }), options.minimumDigits || 0);\n}\n","/**\n * @namespace Helpers.Value\n */\n\n/**\n * An array of objects with min/max ranges.\n *\n * @private\n * @type {array}\n */\nconst RANGES = [{\n    // 0-9\n    min: 48,\n    max: 57\n},{\n    // a-z\n    min: 65,\n    max: 90\n},{\n    // A-Z\n    min: 97,\n    max: 122\n}];\n\n/**\n * Format a string into a new data type. Currently only supports string to\n * number conversion.\n *\n * @private\n * @function format\n * @param {string} string - The string to format.\n * @param {string} type - The data type (represented as a string) used to\n *     convert the string.\n * @return {boolean} - Returns the formatted string.\n */\nfunction format(string, type) {\n    switch(type) {\n        case 'number':\n            return parseFloat(string);\n    }\n\n    return string;\n}\n\n/**\n * Find the range object from the `RANGES` constant from the character given.\n * This is mainly an interval method, but can be used by faces to help\n * determine what the next value of a string should be.\n *\n * @private\n * @function format\n * @param {string} char - The char used to determine the range.\n * @param {string} type - The data type (represented as a string) used to\n *     convert the string.\n * @return {boolean} - Returns the formatted string.\n */\nfunction findRange(char) {\n    for(const i in RANGES) {\n        const code = char.toString().charCodeAt(0);\n\n        if(RANGES[i].min <= code && RANGES[i].max >= code) {\n            return RANGES[i];\n        }\n    }\n\n    return null;\n}\n\n/**\n * Create a string from a character code, which is returned by the callback.\n *\n * @private\n * @callback stringFromCharCodeBy\n * @param {string} char - The char used to determine the range.\n * @param {function} fn - The callback function receives `range` and `code`\n *     arguments. This function should return a character code.\n * @return {string} - Creates a string from the character code returned by the\n *     callback function.\n */\nfunction stringFromCharCodeBy(char, fn) {\n    return String.fromCharCode(\n        fn(findRange(char), char.charCodeAt(0))\n    );\n}\n\n/**\n * Calculate the next value for a string. 'a' becomes 'b'. 'A' becomes 'B'. 1\n * becomes 2, etc. If multiple character strings are passed, 'aa' would become\n * 'bb'.\n *\n * @function next\n * @param  {(string|number)} value - The string or number to convert.\n * @return {string} - The formatted string\n * @memberof Helpers.Value\n */\nexport function next(value) {\n    const converted = (value)\n        .toString()\n        .split('')\n        .map(char => stringFromCharCodeBy(char, (range, code) => {\n            return !range || code < range.max ? code + 1 : range.min\n        }))\n        .join('');\n\n    return format(converted, typeof value);\n}\n\n/**\n * Calculate the prev value for a string. 'b' becomes 'a'. 'B' becomes 'A'. 2\n * becomes 1, 0 becomes 9, etc. If multiple character strings are passed, 'bb'\n * would become 'aa'.\n *\n * @function prev\n * @param  {(string|number)} value - The string or number to convert.\n * @return {string} - The formatted string\n * @memberof Helpers.Value\n */\nexport function prev(value) {\n    const converted = (value)\n        .toString()\n        .split('')\n        .map(char => stringFromCharCodeBy(char, (range, code) => {\n            return !range || code > range.min ? code - 1 : range.max\n        }))\n        .join('');\n\n    return format(converted, typeof value);\n}\n","/**\n * @namespace Helpers.Validate\n */\nimport { isNull } from './Functions';\nimport { flatten } from './Functions';\nimport { isString } from './Functions';\nimport { isObject } from './Functions';\nimport { isFunction } from './Functions';\nimport { isConstructor } from './Functions';\n\n/**\n * Validate the data type of a variable.\n *\n * @function validate\n * @param {*} value - The value to validate.\n * @param {...*} args - The data types to use for validate.\n * @return {boolean} - Returns `true`is the value has a valid data type.\n * @memberof Helpers.Validate\n */\nexport default function validate(value, ...args) {\n    let success = false;\n\n    flatten(args).forEach(arg => {\n        if( (isNull(value) && isNull(arg)) ||\n            (isObject(arg) && (value instanceof arg)) ||\n            (isFunction(arg) && !isConstructor(arg) && arg(value) === true) ||\n            (isString(arg) && (typeof value === arg))) {\n            success = true;\n        }\n    });\n\n    return success;\n}\n","/**\n * @namespace Helpers.Language\n */\nimport * as LANGUAGES from '../Languages';\n\n/**\n * Return the language associated with the key. Returns `null` if no language is\n * found.\n * \n * @function language\n * @param  {string} name - The name or id of the language.\n * @return {object|null} - The language dictionary, or null if not found.\n * @memberof Helpers.Language\n */\nexport default function language(name) {\n    return name ? LANGUAGES[name.toLowerCase()] || Object.values(LANGUAGES).find(value => {\n        return value.aliases.indexOf(name) !== -1;\n    }) : null;\n}\n","/**\n * @namespace Helpers.Translate\n */\nimport language from './Language';\nimport { isString } from './Functions';\n\n/**\n * Translate an English string into another language.\n * \n * @function translate\n * @param {string} string - The string to translate.\n * @param {(string|object)} from - The language used to translate. If a string,\n *     the language is loaded into an object.\n * @return {string} - If no diction key is found, the untranslated string is\n *     returned.\n * @memberof Helpers.Translate\n */\nexport default function translate(string, from) {\n    const lang = isString(from) ? language(from) : from;\n    const dictionary = lang.dictionary || lang;\n    return dictionary[string] || string;\n};\n","/**\n * A collection of functions to manage DOM nodes and theme templates.\n *\n * @namespace Helpers.Template\n */\nimport { noop } from './Functions';\nimport { isArray } from './Functions';\nimport { isObject } from './Functions';\nimport { isString } from './Functions';\nimport { deepFlatten } from './Functions';\n\n/**\n * Swap a new DOM node with an existing one.\n *\n * @function swap\n * @param  {HTMLElement} subject - The new DOM node.\n * @param  {HTMLElement} existing - The existing DOM node.\n * @return {HTMLElement} - Returns the new element if it was mounted, otherwise\n *    the existing node is returned.\n * @memberof Helpers.Template\n */\nexport function swap(subject, existing) {\n\tif(existing.parentNode) {\n\t\texisting.parentNode.replaceChild(subject, existing);\n\n\t\treturn subject;\n\t}\n\n\treturn existing;\n}\n\n/**\n * Set the attribute of an element.\n *\n * @function setAttributes\n * @param  {HTMLElement} el - The DOM node that will receive the attributes.\n * @param  {Object|undefined} [attributes] - The attribute object, or if no object\n *     is passed, then the action is ignored.\n * @return {HTMLElement} el - The DOM node that received the attributes.\n * @memberof Helpers.Template\n */\nexport function setAttributes(el, attributes) {\n\tif(isObject(attributes)) {\n\t\tfor(const i in attributes) {\n\t\t\tel.setAttribute(i, attributes[i]);\n\t\t}\n\t}\n\n\treturn el;\n}\n\n/**\n * Append an array of DOM nodes to a parent.\n *\n * @function appendChildren\n * @param  {HTMLElement} el - The parent DOM node.\n * @param  {Array|undefined} [children] - The array of children. If no array\n *     is passed, then the method silently fails to run.\n * @return {HTMLElement} el - The DOM node that received the attributes.\n * @memberof Helpers.Template\n */\nexport function appendChildren(el, children) {\n\tif(isArray(children)) {\n\t\tchildren.filter(noop).forEach(child => {\n\t\t\tif(child instanceof HTMLElement) {\n\t\t\t\tel.appendChild(child);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn el;\n}\n\n/**\n * Create a new HTMLElement instance.\n *\n * @function createElement\n * @param  {HTMLElement} el - The parent DOM node.\n * @param  {Array|undefined} [children] - The array of children. If no array\n *     is passed, then the method silently fails to run.\n * @param  {Object|undefined} [attributes] - The attributes object.\n * @return {HTMLElement} el - The DOM node that received the attributes.\n * @memberof Helpers.Template\n */\nexport function createElement(el, children, attributes) {\n\tif(!(el instanceof HTMLElement)) {\n\t\tel = document.createElement(el);\n\t}\n\n\tsetAttributes(el, isObject(children) ? children : attributes);\n\n\tif(!isObject(children) && !isArray(children)) {\n\t\tel.innerHTML = children;\n\t}\n\telse {\n\t\tappendChildren(el, children)\n\t}\n\n\treturn el;\n}\n","import { appendChildren, createElement } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    appendChildren(el, [\n        createElement('div', {class: 'flip-clock-dot top'}),\n        createElement('div', {class: 'flip-clock-dot bottom'})\n    ]);\n}\n","import { next } from '../../Helpers/Value';\nimport { appendChildren } from '../../Helpers/Template';\n\nfunction child(el, index) {\n    return el ? (el.childNodes ? el.childNodes[index] : el[index]) : null;\n}\n\nfunction char(el) {\n    return el ? el.querySelector('.flip-clock-list-item:first-child .top').innerHTML : null;\n}\n\nexport default function(el, instance) {\n    const parts = instance.value.digits.map((group, x) => {\n        const groupEl = child(instance.el ? instance.el.querySelectorAll('.flip-clock-group') : null, x);\n\n        const lists = group.map((value, y) => {\n            const listEl = child(groupEl ? groupEl.querySelectorAll('.flip-clock-list') : null, y);\n            const listValue = char(listEl);\n\n            return instance.createList(value, {\n                domValue: listValue,\n                countdown: instance.countdown,\n                animationRate: instance.face.animationRate || instance.face.delay\n            });\n        });\n\n        return instance.createGroup(lists);\n    });\n\n    const nodes = parts.map(group => {\n        return group.render();\n    });\n\n    appendChildren(el, nodes);\n}\n","import { createElement, appendChildren } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    const items = instance.items.map(item => {\n        return item.render();\n    });\n\n    appendChildren(el, items);\n}\n","import { createElement } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    el.innerHTML = instance.t(instance.label);\n}\n","import { next, prev } from '../../Helpers/Value';\nimport ListItem from '../../Components/ListItem';\nimport { createElement, appendChildren } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    const beforeValue = instance.domValue || (\n        !instance.countdown ? prev(instance.value) : next(instance.value)\n    );\n\n    if( instance.domValue && instance.domValue !== instance.value) {\n        el.classList.add('flip');\n    }\n\n    el.style.animationDelay = `${instance.animationRate / 2}ms`;\n    el.style.animationDuration = `${instance.animationRate / 2}ms`;\n\n    instance.items = [\n        instance.createListItem(instance.value, {\n            active: true\n        }),\n        instance.createListItem(beforeValue, {\n            active: false\n        })\n    ];\n\n    appendChildren(el, instance.items.map(item => item.render()));\n}\n","import { createElement, appendChildren } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    const className = instance.active === true ? 'active' : (\n        instance.active === false ? 'before' : null\n    );\n\n    el.classList.add(className);\n\n    appendChildren(el, [\n        createElement('div', [\n            createElement('div', instance.value, {class: 'top'}),\n            createElement('div', instance.value, {class: 'bottom'})\n        ], {class: 'flip-clock-list-item-inner'})\n    ]);\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n    instance.createDivider().mount(el, el.childNodes[3]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[5]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('days').mount(el.childNodes[0]);\n        instance.createLabel('hours').mount(el.childNodes[2]);\n        instance.createLabel('minutes').mount(el.childNodes[4]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[6]);\n        }\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[3]);\n    }\n    \n    if(instance.face.showLabels) {\n        instance.createLabel('hours').mount(el.childNodes[0]);\n        instance.createLabel('minutes').mount(el.childNodes[2]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[4]);\n        }\n    }\n}\n","export default function(el, instance) {\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[1]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('minutes').mount(el.childNodes[0]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[2]);\n        }\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[3]);\n    }\n    \n    if(instance.face.showLabels) {\n        instance.createLabel('hours').mount(el.childNodes[0]);\n        instance.createLabel('minutes').mount(el.childNodes[2]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[4]);\n        }\n    }\n\n}\n","import TwentyFourHourClock from './TwentyFourHourClock';\n\nexport default function(el, instance) {\n    TwentyFourHourClock(el, instance);\n\n    if(instance.face.showMeridium && instance.face.meridium) {\n        const label = instance.createLabel(instance.face.meridium);\n        const parent = el.childNodes[el.childNodes.length - 1];\n\n        label.mount(parent).classList.add('flip-clock-meridium');\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n    instance.createDivider().mount(el, el.childNodes[3]);\n    instance.createDivider().mount(el, el.childNodes[5]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[7]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('weeks').mount(el.childNodes[0]);\n        instance.createLabel('days').mount(el.childNodes[2]);\n        instance.createLabel('hours').mount(el.childNodes[4]);\n        instance.createLabel('minutes').mount(el.childNodes[6]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[8]);\n        }\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n    instance.createDivider().mount(el, el.childNodes[3]);\n    instance.createDivider().mount(el, el.childNodes[5]);\n    instance.createDivider().mount(el, el.childNodes[7]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[9]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('years').mount(el.childNodes[0]);\n        instance.createLabel('weeks').mount(el.childNodes[2]);\n        instance.createLabel('days').mount(el.childNodes[4]);\n        instance.createLabel('hours').mount(el.childNodes[6]);\n        instance.createLabel('minutes').mount(el.childNodes[8]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[10]);\n        }\n    }\n}\n","import { chain, callback, isObject, kebabCase } from '../Helpers/Functions';\n\nexport default class Component {\n\n    /**\n     * Abstract base class.\n     *\n     * @class Component\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(attributes) {\n        this.setAttribute(Object.assign({\n            events: {}\n        }, attributes));\n    }\n\n    /**\n     * Get the `name` attribute. Uses the `this.constructor.name` by default.\n     *\n     * @return {string} - The `name` attribute.\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * Get the `className` attribute. Used for CSS. Kebab cases the `name`\n     * property by default.\n     *\n     * @return {string} - The `className` attribute.\n     */\n    get className() {\n        return kebabCase(this.name);\n    }\n\n    /**\n     * Get the `events` attribute.\n     *\n     * @return {array} - The `events` attribute.\n     */\n    get events() {\n        return this.$events || [];\n    }\n\n    /**\n     * Set the registered events for this class.\n     *\n     * @param  {array} value - The new events array.\n     * @return {void}\n     */\n    set events(value) {\n        this.$events = value;\n    }\n\n    /**\n     * Emit an event.\n     *\n     * @param  {string} key - The event id/key.\n     * @return {Component} - Returns `this` instance.\n     */\n    emit(key, ...args) {\n        if(this.events[key]) {\n            this.events[key].forEach(event => {\n                event.apply(this, args);\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Start listening to an event.\n     *\n     * @param  {string} key - The event id/key.\n     * @param  {Function} fn - The listener callback function.\n     * @param  {boolean} [once=false] - Should the event handler be fired a\n     *     single time.\n     * @return {Component} - Returns `this` instance.\n     */\n    on(key, fn, once = false) {\n        if(!this.events[key]) {\n            this.events[key] = [];\n        }\n\n        this.events[key].push(fn);\n\n        return this;\n    }\n\n    /**\n     * Stop listening to an event.\n     *\n     * @param {string} key - The event id/key.\n     * @param {(Function|undefined)} fn - The listener callback function. If no\n     *     function is defined, all events with the specified id/key will be\n     *     removed. Otherwise, only the event listeners matching the id/key AND\n     *     callback will be removed.\n     * @return {Component} - Returns `this` instance.\n     */\n    off(key, fn) {\n        if(this.events[key] && fn) {\n            this.events[key] = this.events[key].filter(event => {\n                return event !== fn;\n            });\n        }\n        else {\n            this.events[key] = [];\n        }\n\n        return this;\n    }\n\n    /**\n     * Listen to an event only one time.\n     *\n     * @param  {string} key - The event id/key.\n     * @param  {Function} fn - The listener callback function.\n     * @return {Component} - Returns `this` instance.\n     */\n    once(key, fn) {\n        fn = chain(fn, () => this.off(key, fn));\n\n        return this.on(key, fn, true);\n    }\n\n    /**\n     * Get an attribute. Returns null if no attribute is defined.\n     *\n     * @param  {string} key - The attribute name.\n     * @return {*} - The attribute value.\n     */\n    getAttribute(key) {\n        return this.hasOwnProperty(key) ? this[key] : null;\n    }\n\n    /**\n     * Get all the atttributes for this instance.\n     *\n     * @return {object} - The attribute dictionary.\n     */\n    getAttributes() {\n        const attributes = {};\n\n        Object.getOwnPropertyNames(this).forEach(key => {\n            attributes[key] = this.getAttribute(key);\n        });\n\n        return attributes;\n    }\n\n    /**\n     * Get only public the atttributes for this instance. Omits any attribute\n     * that starts with `$`, which is used internally.\n     *\n     * @return {object} - The attribute dictionary.\n     */\n    getPublicAttributes() {\n        return Object.keys(this.getAttributes())\n            .filter(key => {\n                return !key.match(/^\\$/);\n            })\n            .reduce((obj, key) => {\n                obj[key] = this.getAttribute(key);\n                return obj;\n            }, {});\n    }\n\n    /**\n     * Set an attribute key and value.\n     *\n     * @param  {string} key - The attribute name.\n     * @param  {*} value - The attribute value.\n     * @return {void}\n     */\n    setAttribute(key, value) {\n        if(isObject(key)) {\n            this.setAttributes(key)\n        }\n        else {\n            this[key] = value;\n        }\n    }\n\n    /**\n     * Set an attributes by object of key/value pairs.\n     *\n     * @param  {object} values - The object dictionary.\n     * @return {void}\n     */\n    setAttributes(values) {\n        for(const i in values) {\n            this.setAttribute(i, values[i]);\n        }\n    }\n\n    /**\n     * Helper method to execute the `callback()` function.\n     *\n     * @param  {Function} fn - The callback function.\n     * @return {*} - Returns the executed callback function.\n     */\n    callback(fn) {\n        return callback.call(this, fn);\n    }\n\n    /**\n     * Factor method to static instantiate new instances. Useful for writing\n     * clean expressive syntax with chained methods.\n     *\n     * @param  {...*} args - The callback arguments.\n     * @return {*} - The new component instance.\n     */\n    static make(...args) {\n        return new this(...args);\n    }\n\n}\n","import Component from './Component';\nimport digitize from '../Helpers/Digitize';\nimport { next, prev } from '../Helpers/Value';\nimport { length, isObject, isNumber } from '../Helpers/Functions';\n\nexport default class FaceValue extends Component {\n\n    /**\n     * The `FaceValue` class handles all the digitizing for the `Face`.\n     *\n     * @class FaceValue\n     * @extends Component\n     * @param {*} value - The `FaceValue`'s actual value. Most likely should\n     *     string, number, or Date. But since the Face handles the value, it\n     *     could be anything.\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        super(Object.assign({\n            format: value => value,\n            prependLeadingZero: true,\n            minimumDigits: 0\n        }, attributes));\n\n        if(!this.value) {\n            this.value = value;\n        }\n    }\n\n    /**\n     * Get the `digits` attribute.\n     *\n     * @return {(Array|undefined)} - The `digits` attribute.\n     */\n    get digits() {\n        return this.$digits;\n    }\n\n    /**\n     * Set `digits` attribute.\n     *\n     * @param  {array} value - An array of digits/characters.\n     * @return {void}\n     */\n    set digits(value) {\n        this.$digits = value;\n        this.minimumDigits = Math.max(this.minimumDigits, length(value));\n    }\n\n    /**\n     * Get the `value` attribute.\n     *\n     * @return {*} - The `value` attribute.\n     */\n    get value() {\n        return this.$value;\n    }\n\n    /**\n     * Set `value` attribute. Also digitizes the new value, and sets the\n     * `digits` attributes\n     *\n     * @param  {*} value - The `value` attribute.\n     * @return {void}\n     */\n    set value(value) {\n        this.$value = value;\n        this.digits = digitize(this.format(value), {\n            minimumDigits: this.minimumDigits,\n            prependLeadingZero: this.prependLeadingZero\n        });\n    }\n\n    /**\n     * Returns `true` if the `value` attribute is not a number.\n     *\n     * @return {boolean} - `true` is the value is not a number.\n     */\n    isNaN() {\n        return isNaN(this.value);\n    }\n\n    /**\n     * Returns `true` if the `value` attribute is a number.\n     *\n     * @return {boolean} - `true` is the value is a number.\n     */\n    isNumber() {\n        return isNumber()\n    }\n\n    /**\n     * Clones the current `FaceValue` instance, but sets a new value to the\n     * cloned instance. Used for copying the current instance options and\n     * methods, but setting a new value.\n     *\n     * @param  {*} value - The n\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     * @return {FaceValue} - The cloned `FaceValue`.\n     */\n    clone(value, attributes) {\n        return new this.constructor(value, Object.assign(\n            this.getPublicAttributes(), attributes\n        ));\n    }\n\n}\n","/**\n * @alias ConsoleMessages\n * @type {object}\n * @memberof module:Config/ConsoleMessages\n */\nexport default {\n    items: 'The items property must be an array.',\n    theme: 'The theme property must be an object.',\n    language: 'The language must be an object.',\n    date: 'The value must be an instance of a Date.',\n    face: 'The face must be an instance of a Face class.',\n    element: 'The element must be an instance of an HTMLElement',\n    faceValue: 'The face must be an instance of a FaceValue class.',\n    timer: 'The timer property must be an instance of a Timer class.'\n};\n","import Component from './Component';\nimport FaceValue from './FaceValue';\nimport validate from '../Helpers/Validate';\nimport ConsoleMessages from '../Config/ConsoleMessages';\nimport { error, isNull, isUndefined, isObject, isArray, isFunction, callback } from '../Helpers/Functions';\n\nexport default class Face extends Component {\n\n    /**\n     * This class is meant to be provide an interface for all other faces to\n     * extend.\n     *\n     * @class Face\n     * @extends Component\n     * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n     *     of FaceValue, this argument is assumed to be the instance attributes.\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        if(!(value instanceof FaceValue) && isObject(value)) {\n            attributes = value;\n            value = undefined;\n        }\n\n        super();\n\n        this.setAttributes(Object.assign({\n            autoStart: true,\n            countdown: false,\n            animationRate: 500\n        }, this.defaultAttributes(), attributes || {}));\n\n        if(isNull(value) || isUndefined(value)) {\n            value = this.defaultValue();\n        }\n\n        if(value) {\n            this.value = value;\n        }\n    }\n\n    /**\n     * Get the `dataType` attribute.\n     *\n     * @return {*} - The `dataType` attribute.\n     */\n    get dataType() {\n        return this.defaultDataType();\n    }\n\n    /**\n     * Get the `value` attribute.\n     *\n     * @return {*} - The `value` attribute.\n     */\n    get value() {\n        return this.$value;\n    }\n\n    /**\n     * Set the `value` attribute.\n     *\n     * @param  {*} value - Any value that is not an instance of `FaceValue` will\n     *     be cast into one.\n     * @return {void}\n     */\n    set value(value) {\n        if(!(value instanceof FaceValue)) {\n            value = this.createFaceValue(value);\n        }\n\n        this.$value = value;\n    }\n\n    /**\n     * Get the `stopAt` attribute.\n     *\n     * @return {*} - The `stopAt` attribute.\n     */\n    get stopAt() {\n        return this.$stopAt;\n    }\n\n    /**\n     * Set the `stopAt` attribute.\n     *\n     * @param  {*} value - Any value that is used to match against the face to\n     *     determine when the clock should stop.\n     * @return {void}\n     */\n    set stopAt(value) {\n        this.$stopAt = value;\n    }\n\n    /**\n     * Get the `originalValue` attribute.\n     *\n     * @return {*} - The `originalValue` attribute.\n     */\n    get originalValue() {\n        return this.$originalValue;\n    }\n\n    /**\n     * Set the `originalValue` attribute.\n     *\n     * @param  {*} value - The `originalValue` attribute.\n     * @return {void}\n     */\n    set originalValue(value) {\n        this.$originalValue = value;\n    }\n\n    /**\n     * This method is called with every interval, or every time the clock\n     * should change, and handles the actual incrementing and decrementing the\n     * clock's `FaceValue`.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {Function} fn - The interval callback.\n     * @return {Face} - This `Face` instance.\n     */\n    interval(instance, fn) {\n        if(this.countdown) {\n            this.decrement(instance);\n        }\n        else {\n            this.increment(instance);\n        }\n\n        callback.call(this, fn);\n\n        if(this.shouldStop(instance)) {\n            instance.stop();\n        }\n\n        return this.emit('interval');\n    }\n\n    /**\n     * Determines if the clock should stop or not.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {boolean} - Returns `true` if the clock should stop.\n     */\n    shouldStop(instance) {\n        return !isUndefined(this.stopAt) ? this.stopAt === instance.value.value : false;\n    }\n\n    /**\n     * By default this just returns the value unformatted.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {*} value - The value to format.\n     * @return {*} - The formatted value.\n     */\n    format(instance, value) {\n        return value;\n    }\n\n    /**\n     * The default value for the `Face`.\n     *\n     * @return {*} - The default value.\n     */\n    defaultValue() {\n        //\n    }\n\n    /**\n     * The default attributes for the `Face`.\n     *\n     * @return {(Object|undefined)} - The default attributes.\n     */\n    defaultAttributes() {\n        //\n    }\n\n    /**\n     * The default data type for the `Face` value.\n     *\n     * @return {(Object|undefined)} - The default data type.\n     */\n    defaultDataType() {\n        //\n    }\n\n    /**\n     * Increment the clock.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {Number} [amount] - The amount to increment. If the amount is not\n     *     defined, it is left up to the `Face` to determine the default value.\n     * @return {void}\n     */\n    increment(instance, amount) {\n        //\n    }\n\n    /**\n     * Decrement the clock.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {Number} [amount] - The amount to decrement. If the amount is not\n     *     defined, it is left up to the `Face` to determine the default value.\n     * @return {void}\n     */\n    decrement(instance, amount) {\n        //\n    }\n\n    /**\n     * This method is called right after clock has started.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    started(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after clock has stopped.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    stopped(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after clock has reset.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    reset(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after `Face` has initialized.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    initialized(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after `Face` has rendered.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    rendered(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after `Face` has mounted.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    mounted(instance) {\n        if(this.autoStart && instance.timer.isStopped) {\n            window.requestAnimationFrame(() => instance.start(instance));\n        }\n    }\n\n    /**\n     * Helper method to instantiate a new `FaceValue`.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `FaceValue` instance.\n     * @return {Divider} - The instantiated `FaceValue`.\n     */\n    createFaceValue(instance, value) {\n        return FaceValue.make(\n            isFunction(value) && !value.name ? value() : value, {\n                minimumDigits: this.minimumDigits,\n                format: value => this.format(instance, value)\n            }\n        );\n    }\n\n}\n","/**\n * @classdesc Arabic Language Pack\n * @desc This class will be used to translate tokens into the Arabic language.\n * @namespace Languages.Arabic\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Arabic\n */\nexport const dictionary = {\n    'years'   : 'سنوات',\n    'months'  : 'شهور',\n    'days'    : 'أيام',\n    'hours'   : 'ساعات',\n    'minutes' : 'دقائق',\n    'seconds' : 'ثواني'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Arabic\n */\nexport const aliases = ['ar', 'ar-ar', 'arabic'];\n","/**\n * @classdesc Catalan Language Pack\n * @desc This class will used to translate tokens into the Catalan language.\n * @namespace Languages.Catalan\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Catalan\n */\nexport const dictionary = {\n    'years' : 'Anys',\n    'months' : 'Mesos',\n    'days' : 'Dies',\n    'hours' : 'Hores',\n    'minutes' : 'Minuts',\n    'seconds' : 'Segons'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Catalan\n */\nexport const aliases = ['ca', 'ca-es', 'catalan'];\n","/**\n * @classdesc Czech Language Pack\n * @desc This class will used to translate tokens into the Czech language.\n * @namespace Languages.Czech\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Czech\n */\nexport const dictionary = {\n    'years'   : 'Roky',\n    'months'  : 'Měsíce',\n    'days'    : 'Dny',\n    'hours'   : 'Hodiny',\n    'minutes' : 'Minuty',\n    'seconds' : 'Sekundy'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Czech\n */\nexport const aliases = ['cs', 'cs-cz', 'cz', 'cz-cs', 'czech'];\n","/**\n * @classdesc Danish Language Pack\n * @desc This class will used to translate tokens into the Danish language.\n * @namespace Languages.Danish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Danish\n */\nexport const dictionary = {\n\t'years'   : 'År',\n\t'months'  : 'Måneder',\n\t'days'    : 'Dage',\n\t'hours'   : 'Timer',\n\t'minutes' : 'Minutter',\n\t'seconds' : 'Sekunder'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Danish\n */\nexport const aliases = ['da', 'da-dk', 'danish'];\n","/**\n * @classdesc German Language Pack\n * @desc This class will used to translate tokens into the German language.\n * @namespace Languages.German\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.German\n */\nexport const dictionary = {\n\t'years'   : 'Jahre',\n\t'months'  : 'Monate',\n\t'days'    : 'Tage',\n\t'hours'   : 'Stunden',\n\t'minutes' : 'Minuten',\n\t'seconds' : 'Sekunden'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.German\n */\nexport const aliases = ['de', 'de-de', 'german'];\n","/**\n * @classdesc English Language Pack\n * @desc This class will used to translate tokens into the English language.\n * @namespace Languages.English\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.English\n */\nexport const dictionary = {\n\t'years'   : 'Years',\n\t'months'  : 'Months',\n\t'days'    : 'Days',\n\t'hours'   : 'Hours',\n\t'minutes' : 'Minutes',\n\t'seconds' : 'Seconds'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.English\n */\nexport const aliases = ['en', 'en-us', 'english'];\n","/**\n * @classdesc Spanish Language Pack\n * @desc This class will used to translate tokens into the Spanish language.\n * @namespace Languages.Spanish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Spanish\n */\nexport const dictionary = {\n\t'years'   : 'Años',\n\t'months'  : 'Meses',\n\t'days'    : 'Días',\n\t'hours'   : 'Horas',\n\t'minutes' : 'Minutos',\n\t'seconds' : 'Segundos'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Spanish\n */\nexport const aliases = ['es', 'es-es', 'spanish'];\n","/**\n * @classdesc Persian Language Pack\n * @desc This class will used to translate tokens into the Persian language.\n * @namespace Languages.Persian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Persian\n */\nexport const dictionary = {\n\t'years'   : 'سال',\n\t'months'  : 'ماه',\n\t'days'    : 'روز',\n\t'hours'   : 'ساعت',\n\t'minutes' : 'دقیقه',\n\t'seconds' : 'ثانیه'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Persian\n */\nexport const aliases = ['fa', 'fa-ir', 'persian'];\n","/**\n * @classdesc Finnish Language Pack\n * @desc This class will used to translate tokens into the Finnish language.\n * @namespace Languages.Finnish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Finnish\n */\nexport const dictionary = {\n\t'years'   : 'Vuotta',\n\t'months'  : 'Kuukautta',\n\t'days'    : 'Päivää',\n\t'hours'   : 'Tuntia',\n\t'minutes' : 'Minuuttia',\n\t'seconds' : 'Sekuntia'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Finnish\n */\nexport const aliases = ['fi', 'fi-fi', 'finnish'];\n","/**\n * @classdesc Canadian French Language Pack\n * @desc This class will used to translate tokens into the Canadian French language.\n * @namespace Languages.CanadianFrench\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.CanadianFrench\n */\nexport const dictionary = {\n    'years'   : 'Ans',\n    'months'  : 'Mois',\n    'days'    : 'Jours',\n    'hours'   : 'Heures',\n    'minutes' : 'Minutes',\n    'seconds' : 'Secondes'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.CanadianFrench\n */\nexport const aliases = ['fr', 'fr-ca', 'french'];\n","/**\n * @classdesc Hebrew Language Pack\n * @desc This class will used to translate tokens into the Hebrew language.\n * @namespace Languages.Hebrew\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Hebrew\n */\nexport const dictionary = {\n\t'years'   : 'שנים',\n\t'months'  : 'חודש',\n\t'days'    : 'ימים',\n\t'hours'   : 'שעות',\n\t'minutes' : 'דקות',\n\t'seconds' : 'שניות'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Hebrew\n */\nexport const aliases = ['il', 'he-il', 'hebrew'];\n","/**\n * @classdesc Hungarian Language Pack\n * @desc This class will used to translate tokens into the Hungarian language.\n * @namespace Languages.Hungarian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Hungarian\n */\nexport const dictionary = {\n\t'years'   : 'Év',\n    'months'  : 'Hónap',\n    'days'    : 'Nap',\n    'hours'   : 'Óra',\n    'minutes' : 'Perc',\n    'seconds' : 'Másodperc'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Hungarian\n */\nexport const aliases = ['hu', 'hu-hu', 'hungarian'];\n","/**\n * @classdesc Italian Language Pack\n * @desc This class will used to translate tokens into the Italian language.\n * @namespace Languages.Italian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Italian\n */\nexport const dictionary = {\n\t'years'   : 'Anni',\n\t'months'  : 'Mesi',\n\t'days'    : 'Giorni',\n\t'hours'   : 'Ore',\n\t'minutes' : 'Minuti',\n\t'seconds' : 'Secondi'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Italian\n */\nexport const aliases = ['da', 'da-dk', 'danish'];\n","/**\n * @classdesc Japanese Language Pack\n * @desc This class will used to translate tokens into the Japanese language.\n * @namespace Languages.Japanese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Japanese\n */\nexport const dictionary = {\n\t'years'   : '年',\n\t'months'  : '月',\n\t'days'    : '日',\n\t'hours'   : '時',\n\t'minutes' : '分',\n\t'seconds' : '秒'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Japanese\n */\nexport const aliases = ['jp', 'ja-jp', 'japanese'];\n","/**\n * @classdesc Korean Language Pack\n * @desc This class will used to translate tokens into the Korean language.\n * @namespace Languages.Korean\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Korean\n */\nexport const dictionary = {\n\t'years'   : '년',\n\t'months'  : '월',\n\t'days'    : '일',\n\t'hours'   : '시',\n\t'minutes' : '분',\n\t'seconds' : '초'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Korean\n */\nexport const aliases = ['ko', 'ko-kr', 'korean'];\n","/**\n * @classdesc Latvian Language Pack\n * @desc This class will used to translate tokens into the Latvian language.\n * @namespace Languages.Latvian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Latvian\n */\nexport const dictionary = {\n    'years'   : 'Gadi',\n    'months'  : 'Mēneši',\n    'days'    : 'Dienas',\n    'hours'   : 'Stundas',\n    'minutes' : 'Minūtes',\n    'seconds' : 'Sekundes'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Latvian\n */\nexport const aliases = ['lv', 'lv-lv', 'latvian'];\n","/**\n * @classdesc Dutch Language Pack\n * @desc This class will used to translate tokens into the Dutch language.\n * @namespace Languages.Dutch\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Dutch\n */\nexport const dictionary = {\n    'years'   : 'Jaren',\n    'months'  : 'Maanden',\n    'days'    : 'Dagen',\n    'hours'   : 'Uren',\n    'minutes' : 'Minuten',\n    'seconds' : 'Seconden'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Dutch\n */\nexport const aliases = ['nl', 'nl-be', 'dutch'];\n","/**\n * @classdesc Norwegian-Bokmål Language Pack\n * @desc This class will used to translate tokens into the Norwegian-Bokmål language.\n * @namespace Languages.Norwegian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Norwegian\n */\nexport const dictionary = {\n\t'years'   : 'År',\n\t'months'  : 'Måneder',\n\t'days'    : 'Dager',\n\t'hours'   : 'Timer',\n\t'minutes' : 'Minutter',\n\t'seconds' : 'Sekunder'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Norwegian\n */\nexport const aliases = ['no', 'nb', 'no-nb', 'norwegian'];\n","/**\n * @classdesc Polish Language Pack\n * @desc This class will used to translate tokens into the Polish language.\n * @namespace Languages.Polish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Polish\n */\nexport const dictionary = {\n\t'years'   : 'Lat',\n\t'months'  : 'Miesięcy',\n\t'days'    : 'Dni',\n\t'hours'   : 'Godziny',\n\t'minutes' : 'Minuty',\n\t'seconds' : 'Sekundy'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Polish\n */\nexport const aliases = ['pl', 'pl-pl', 'polish'];\n","/**\n * @classdesc Portuguese Language Pack\n * @desc This class will used to translate tokens into the Portuguese language.\n * @namespace Languages.Portuguese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Portuguese\n */\nexport const dictionary = {\n\t'years'   : 'Anos',\n\t'months'  : 'Meses',\n\t'days'    : 'Dias',\n\t'hours'   : 'Horas',\n\t'minutes' : 'Minutos',\n\t'seconds' : 'Segundos'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Portuguese\n */\nexport const aliases = ['pt', 'pt-br', 'portuguese'];\n","/**\n * @classdesc Romanian Language Pack\n * @desc This class will used to translate tokens into the Romanian language.\n * @namespace Languages.Romanian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Romanian\n */\nexport const dictionary = {\n\t'years': 'Ani',\n\t'months': 'Luni',\n\t'days': 'Zile',\n\t'hours': 'Ore',\n\t'minutes': 'Minute',\n\t'seconds': 'sSecunde'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Romanian\n */\nexport const aliases = ['ro', 'ro-ro', 'romana'];\n","/**\n * @classdesc Russian Language Pack\n * @desc This class will used to translate tokens into the Russian language.\n * @namespace Languages.Russian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Russian\n */\nexport const dictionary = {\n    'years'   : 'лет',\n    'months'  : 'месяцев',\n    'days'    : 'дней',\n    'hours'   : 'часов',\n    'minutes' : 'минут',\n    'seconds' : 'секунд'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Russian\n */\nexport const aliases = ['ru', 'ru-ru', 'russian'];\n","/**\n * @classdesc Slovak Language Pack\n * @desc This class will used to translate tokens into the Slovak language.\n * @namespace Languages.Slovak\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Slovak\n */\nexport const dictionary = {\n\t'years'   : 'Roky',\n\t'months'  : 'Mesiace',\n\t'days'    : 'Dni',\n\t'hours'   : 'Hodiny',\n\t'minutes' : 'Minúty',\n\t'seconds' : 'Sekundy'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Slovak\n */\nexport const aliases = ['sk', 'sk-sk', 'slovak'];\n","/**\n * @classdesc Swedish Language Pack\n * @desc This class will used to translate tokens into the Swedish language.\n * @namespace Languages.Swedish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Swedish\n */\nexport const dictionary = {\n\t'years'   : 'År',\n\t'months'  : 'Månader',\n\t'days'    : 'Dagar',\n\t'hours'   : 'Timmar',\n\t'minutes' : 'Minuter',\n\t'seconds' : 'Sekunder'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Swedish\n */\nexport const aliases = ['sv', 'sv-se', 'swedish'];\n","/**\n * @classdesc Thai Language Pack\n * @desc This class will used to translate tokens into the Thai language.\n * @namespace Languages.Thai\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Thai\n */\nexport const dictionary = {\n\t'years'   : 'ปี',\n\t'months'  : 'เดือน',\n\t'days'    : 'วัน',\n\t'hours'   : 'ชั่วโมง',\n\t'minutes' : 'นาที',\n\t'seconds' : 'วินาที'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Thai\n */\nexport const aliases = ['th', 'th-th', 'thai'];\n","/**\n * @classdesc Turkish Language Pack\n * @desc This class will used to translate tokens into the Turkish language.\n * @namespace Languages.Turkish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Turkish\n */\nexport const dictionary = {\n\t'years'   : 'Yıl',\n\t'months'  : 'Ay',\n\t'days'    : 'Gün',\n\t'hours'   : 'Saat',\n\t'minutes' : 'Dakika',\n\t'seconds' : 'Saniye'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Turkish\n */\nexport const aliases = ['tr', 'tr-tr', 'turkish'];\n","/**\n * @classdesc Ukrainian Language Pack\n * @desc This class will used to translate tokens into the Ukrainian language.\n * @namespace Languages.Ukrainian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Ukrainian\n */\nexport const dictionary = {\n    'years'   : 'роки',\n    'months'  : 'місяці',\n    'days'    : 'дні',\n    'hours'   : 'години',\n    'minutes' : 'хвилини',\n    'seconds' : 'секунди'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Ukrainian\n */\nexport const aliases = ['ua', 'ua-ua', 'ukraine'];\n","/**\n * @classdesc Vietnamese Language Pack\n * @desc This class will used to translate tokens into the Vietnamese language.\n * @namespace Languages.Vietnamese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Vietnamese\n */\nexport const dictionary = {\n\t'years'   : 'Năm',\n\t'months'  : 'Tháng',\n\t'days'    : 'Ngày',\n\t'hours'   : 'Giờ',\n\t'minutes' : 'Phút',\n\t'seconds' : 'Giây'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Vietnamese\n */\nexport const aliases = ['vn', 'vn-vn', 'vietnamese'];\n","/**\n * @classdesc Chinese Language Pack\n * @desc This class will used to translate tokens into the Chinese language.\n * @namespace Languages.Chinese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Chinese\n */\nexport const dictionary = {\n\t'years'   : '年',\n\t'months'  : '月',\n\t'days'    : '日',\n\t'hours'   : '时',\n\t'minutes' : '分',\n\t'seconds' : '秒'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Chinese\n */\nexport const aliases = ['zh', 'zh-cn', 'chinese'];\n","/**\n * @classdesc Traditional Chinese Language Pack\n * @desc This class will used to translate tokens into the Traditional Chinese language.\n * @namespace Languages.TraditionalChinese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.TraditionalChinese\n */\nexport const dictionary = {\n\t'years'   : '年',\n\t'months'  : '月',\n\t'days'    : '日',\n\t'hours'   : '時',\n\t'minutes' : '分',\n\t'seconds' : '秒'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.TraditionalChinese\n */\nexport const aliases = ['zh-tw'];\n","import Component from './Component';\nimport language from '../Helpers/Language';\nimport validate from '../Helpers/Validate';\nimport translate from '../Helpers/Translate';\nimport { error } from '../Helpers/Functions';\nimport { isString } from '../Helpers/Functions';\nimport ConsoleMessages from '../Config/ConsoleMessages';\nimport { swap, createElement } from '../Helpers/Template';\n\nexport default class DomComponent extends Component {\n\n    /**\n     * An abstract class that all other DOM components can extend.\n     *\n     * @class DomComponent\n     * @extends Component\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(attributes) {\n        super(Object.assign({\n            parent: null\n        }, attributes));\n\n        if(!this.theme) {\n            error(`${this.name} does not have a theme defined.`);\n        }\n\n        if(!this.language) {\n            error(`${this.name} does not have a language defined.`);\n        }\n\n\t\tif(!this.theme[this.name]) {\n            throw new Error(\n                `${this.name} cannot be rendered because it has no template.`\n            );\n        }\n    }\n\n    /**\n     * Get the component's top level DOM node.\n     *\n     * @return {HTMLElement} - The `el` attribute.\n     */\n    get el() {\n        return this.$el;\n    }\n\n    /**\n     * Set the component's top level DOM node.\n     *\n     * @param  {(null|HTMLElement)} value - The `el` attribute.\n     * @return {void}\n     */\n    set el(value) {\n        if(!validate(value, null, HTMLElement)) {\n            error(ConsoleMessages.element);\n        }\n\n        this.$el = value;\n    }\n\n    /**\n     * Get the `parent` attribute. Parent is set when `DomComponent` instances are\n     * mounted.\n     *\n     * @return {DomComponent} - The `parent` attribute.\n     */\n    get parent() {\n        return this.$parent;\n    }\n\n    /**\n     * Set the parent attribute.\n     *\n     * @param  {DomComponent} parent - The `parent` attribute value.\n     * @return {DomComponent} - The `parent` attribute.\n     */\n    set parent(parent) {\n        this.$parent = parent;\n    }\n\n    /**\n     * Get the `theme` attribute.\n     *\n     * @return {DomComponent} - The `theme` attribute.\n     */\n    get theme() {\n        return this.$theme;\n    }\n\n    /**\n     * Set the `theme` attribute.\n     *\n     * @param  {object} value - The `theme` attribute.\n     * @return {void}\n     */\n    set theme(value) {\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.value);\n        }\n\n        this.$theme = value;\n    }\n\n    /**\n     * Get the language attribute.\n     *\n     * @return {object} - The `language` attribute.\n     */\n    get language() {\n        return this.$language;\n    }\n\n    /**\n     * Set the language attribute.\n     *\n     * @param  {object} value - The `language` attribute.\n     * @return {object} - The `language` attribute.\n     */\n    set language(value) {\n        if(isString(value)) {\n            value = language(value);\n        }\n\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.language);\n        }\n\n        this.$language = value;\n    }\n\n    /**\n     * Translate a string.\n     *\n     * @param  {string} string - The string to translate.\n     * @return {string} - The translated string. If no tranlation found, the\n     *     untranslated string is returned.\n     */\n    translate(string) {\n        return translate(string, this.language);\n    }\n\n    /**\n     * Alias to translate(string);\n     *\n     * @alias DomComponent.translate\n     */\n    t(string) {\n        return this.translate(string);\n    }\n\n    /**\n     * Render the DOM component.\n     *\n     * @return {HTMLElement} - The `el` attribute.\n     */\n\trender() {\n        const el = createElement('div', {\n            class: this.className === 'flip-clock' ? this.className : 'flip-clock-' + this.className\n        });\n\n        this.theme[this.name](el, this);\n\n        if(!this.el) {\n            this.el = el;\n        }\n        else if(this.el.innerHTML !== el.innerHTML) {\n            this.el = swap(el, this.el);\n        }\n\n        return this.el;\n\t}\n\n    /**\n     * Mount a DOM component to a parent node.\n     *\n     * @param  {HTMLElement} parent - The parent DOM node.\n     * @param  {(false|HTMLElement)} [before=false] - If `false`, element is\n     *     appended to the parent node. If an instance of an `HTMLElement`,\n     *     the component will be inserted before the specified element.\n     * @return {HTMLElement} - The `el` attribute.\n     */\n    mount(parent, before = false) {\n        this.render();\n        this.parent = parent;\n\n        if(!before) {\n            this.parent.appendChild(this.el);\n        }\n        else {\n            this.parent.insertBefore(this.el, before);\n        }\n\n        return this.el;\n    }\n\n}\n","import DomComponent from './DomComponent';\n\n/**\n * Create a new `Divider` instance.\n *\n * The purpose of this class is to return a unique class name so the theme can\n * render it appropriately, since each `DomComponent` can receive its own template\n * from the theme.\n *\n * @class Divider\n * @extends DomComponent\n * @param {(object|undefined)} [attributes] - The instance attributes.\n */\nexport default class Divider extends DomComponent {\n\n}\n","import DomComponent from './DomComponent';\nimport { isObject } from '../Helpers/Functions';\n\nexport default class ListItem extends DomComponent {\n\n    /**\n     * This class is used to represent a single digits in a `List`.\n     *\n     * @class ListItem\n     * @extends DomComponent\n     * @param {(Number|String)} value - The value of the `ListItem`.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        super(Object.assign({\n            value: value\n        }, isObject(value) ? value : null, attributes));\n    }\n\n}\n","import Divider from './Divider';\nimport ListItem from './ListItem';\nimport DomComponent from './DomComponent';\nimport { next, prev,  } from '../Helpers/Value';\nimport { isObject,  } from '../Helpers/Functions';\n\nexport default class List extends DomComponent {\n\n    /**\n     * This class is used to add a digit to the clock face. This class is called\n     * `List` because it contains a list of `ListItem`'s which are used to\n     * create flip effects. In the context of FlipClock.js a `List` represents\n     * one single digit.\n     *\n     * @class List\n     * @extends DomComponent\n     * @param {Number|String|Object} label - The active value. If an object, it\n     * is assumed that it is the instance attributes.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        super(Object.assign({\n            value: value,\n            items: [],\n        }, isObject(value) ? value : null, attributes));\n    }\n\n    /**\n     * Get the `value` attribute.\n     *\n     * @return {(Number|String)} - The `value` attribute.\n     */\n    get value() {\n        return this.$value;\n    }\n\n    /**\n     * Set the `value` attribute.\n     *\n     * @param  {array} value - The `value` attribute.\n     * @return {(Number|String)} - The `value` attribute.\n     */\n    set value(value) {\n        this.$value = value;\n    }\n\n    /**\n     * Get the `items` attribute.\n     *\n     * @return {(Number|String)} - The `items` attribute.\n     */\n    get items() {\n        return this.$items;\n    }\n\n    /**\n     * Set the `items` attribute.\n     *\n     * @param  {array} value - The `items` attribute.\n     * @return {(Number|String)} - The `items` attribute.\n     */\n    set items(value) {\n        this.$items = value;\n    }\n\n    /**\n     * Helper method to instantiate a new `ListItem`.\n     *\n     * @param  {(Number|String)} value - The `ListItem` value.\n     * @param  {(Object|undefined)} [attributes] - The instance attributes.\n     * @return {ListItem} - The instantiated `ListItem`.\n     */\n    createListItem(value, attributes) {\n        const item = new ListItem(value, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n\n        this.$items.push(item);\n\n        return item;\n    }\n\n}\n","import DomComponent from './DomComponent';\nimport { isObject, isArray } from '../Helpers/Functions';\n\nexport default class Group extends DomComponent {\n\n    /**\n     * This class is used to group values within a clock face. How the groups\n     * are displayed is determined by the theme.\n     *\n     * @class Group\n     * @extends DomComponent\n     * @param {Array|Object} items - An array `List` instances or an object of\n     *     attributes. If not an array, assumed to be the attributes.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(items, attributes) {\n        super(Object.assign({\n            items: isArray(items) ? items : []\n        }, (isObject(items) ? items : null), attributes));\n    }\n\n}\n","import DomComponent from './DomComponent';\nimport { isObject } from '../Helpers/Functions';\n\nexport default class Label extends DomComponent {\n\n    /**\n     * This class is used to add a label to the clock face.\n     *\n     * @class Label\n     * @extends DomComponent\n     * @param {Number|String|Object} label - The label attribute. If an object,\n     *     it is assumed that it is the instance attributes.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(label, attributes) {\n        super(Object.assign({\n            label: label\n        }, (isObject(label) ? label : null), attributes));\n    }\n\n}\n","import Component from './Component';\nimport { isObject, isNumber, callback } from '../Helpers/Functions';\n\nexport default class Timer extends Component {\n\n    /**\n     * Create a new `Timer` instance.\n     *\n     * @class Timer\n     * @extends Component\n     * @param {(Object|Number)} interval - The interval passed as a `Number`,\n     *     or can set the attribute of the class with an object.\n     */\n    constructor(interval) {\n        super(Object.assign({\n            count: 0,\n            handle: null,\n            started: null,\n            running: false,\n            interval: isNumber(interval) ? interval : null,\n        }, isObject(interval) ? interval : null));\n    }\n\n    /**\n     * Gets the elapsed the time as an interger.\n     *\n     * @return {Number} The `elapsed` attribute.\n     */\n    get elapsed() {\n        return !this.lastLoop ? 0 : this.lastLoop - (\n            this.started ? this.started.getTime() : new Date().getTime()\n        );\n    }\n\n    /**\n     * Returns true is the timer is running.\n     *\n     * @return {boolean} - Returns `true` the `running` property is `true`\n     */\n    get isRunning() {\n        return this.running === true;\n    }\n\n    /**\n     * Returns true is the timer is not running.\n     *\n     * @return {boolean} - Returns `true` the `running` property is `false`\n     */\n    get isStopped() {\n        return this.running === false;\n    }\n\n    /**\n     * Resets the timer.\n     *\n     * @param  {(Function|undefined)} fn - The interval callback.\n     * @return {Timer} - The `Timer` instance.\n     */\n    reset(fn) {\n        this.stop(() => {\n            this.count = 0;\n            this.start(() => callback.call(this, fn));\n            this.emit('reset');\n        });\n\n        return this;\n    }\n\n    /**\n     * Starts the timer.\n     *\n     * @param  {Function} fn - The interval callback.\n     * @return {Timer} - The `Timer` instance.\n     */\n    start(fn) {\n        this.started = new Date;\n        this.lastLoop = Date.now();\n        this.running = true;\n        this.emit('start');\n\n        const loop = () => {\n            if(Date.now() - this.lastLoop >= this.interval) {\n                callback.call(this, fn);\n                this.lastLoop = Date.now();\n                this.emit('interval');\n                this.count++;\n            }\n\n            this.handle = window.requestAnimationFrame(loop);\n\n            return this;\n        };\n\n        return loop();\n    }\n\n    /**\n     * Stops the timer.\n     *\n     * @param  {Function} fn - The stop callback.\n     * @return {Timer} - The `Timer` instance.\n     */\n    stop(fn) {\n        if(this.isRunning) {\n            setTimeout(() => {\n                window.cancelAnimationFrame(this.handle);\n\n                this.running = false;\n\n                callback.call(this, fn);\n\n                this.emit('stop');\n            });\n        }\n\n        return this;\n    }\n\n}\n","import Face from '../Components/Face';\n\n/**\n * @classdesc This face is designed to increment and decrement numberic values,\n *     not `Date` objects.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class Counter extends Face {\n\n    increment(instance, value = 1) {\n        instance.value = this.value.value + value;\n    }\n\n    decrement(instance, value = 1) {\n        instance.value = this.value.value - value;\n    }\n\n}\n","import Face from '../Components/Face';\nimport { noop, round, isNull, isUndefined, isNumber, callback } from '../Helpers/Functions';\n\n/**\n * @classdesc This face is meant to display a clock that shows minutes, and\n *     seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class MinuteCounter extends Face {\n\n    defaultDataType() {\n        return Date;\n    }\n\n    defaultAttributes() {\n        return {\n            showSeconds: true,\n            showLabels: true\n        };\n    }\n\n    shouldStop(instance) {\n        if(isNull(instance.stopAt) || isUndefined(instance.stopAt)) {\n            return false;\n        }\n\n        if(this.stopAt instanceof Date) {\n            return this.countdown ?\n                this.stopAt.getTime() >= this.value.value.getTime():\n                this.stopAt.getTime() <= this.value.value.getTime();\n        }\n        else if(isNumber(this.stopAt)) {\n            const diff = Math.floor((this.value.value.getTime() - this.originalValue.getTime()) / 1000);\n\n            return this.countdown ?\n                this.stopAt >= diff:\n                this.stopAt <= diff;\n        }\n\n        throw new Error(`the stopAt property must be an instance of Date or Number.`);\n    }\n\n    increment(instance, value = 0) {\n        instance.value = new Date(this.value.value.getTime() + value + (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    decrement(instance, value = 0) {\n        instance.value = new Date(this.value.value.getTime() - value - (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    format(instance, value) {\n        const started = instance.timer.isRunning ? instance.timer.started : new Date(Date.now() - 50);\n\n        return [\n            [this.getMinutes(value, started)],\n            this.showSeconds ? [this.getSeconds(value, started)] : null\n        ].filter(noop);\n    }\n\n    getMinutes(a, b) {\n        return round(this.getTotalSeconds(a, b) / 60);\n    }\n\n    getSeconds(a, b) {\n        const totalSeconds = this.getTotalSeconds(a, b);\n\n        return Math.abs(Math.ceil(totalSeconds === 60 ? 0 : totalSeconds % 60));\n    }\n\n    getTotalSeconds(a, b) {\n        return a.getTime() === b.getTime() ? 0 : Math.round((a.getTime() - b.getTime()) / 1000);\n    }\n\n}\n","import MinuteCounter from './MinuteCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows\n *     hours, minutes, and seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class HourCounter extends MinuteCounter {\n\n    format(instance, value) {\n        const now = !instance.timer.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)])\n        }\n\n        return data;\n    }\n\n    getMinutes(a, b) {\n        return Math.abs(super.getMinutes(a, b) % 60);\n    }\n\n    getHours(a, b) {\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60);\n    }\n\n}\n","import HourCounter from './HourCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows days, hours,\n *     minutes, and seconds.\n * @extends HourCounter\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class DayCounter extends HourCounter {\n\n    format(instance, value) {\n        const now = !instance.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getDays(a, b)],\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)])\n        }\n\n        return data;\n    }\n\n    getDays(a, b) {\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60 / 24);\n    }\n\n    getHours(a, b) {\n        return Math.abs(super.getHours(a, b) % 24);\n    }\n\n}\n","import Face from '../Components/Face';\nimport { callback } from '../Helpers/Functions';\n\n/**\n * @classdesc This face shows the current time in twenty-four hour format.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class TwentyFourHourClock extends Face {\n\n    defaultDataType() {\n        return Date;\n    }\n\n    defaultValue() {\n        return new Date;\n    }\n\n    defaultAttributes() {\n        return {\n            showSeconds: true,\n            showLabels: false\n        };\n    }\n\n    format(instance, value) {\n        if(!value) {\n            value = new Date;\n        }\n\n        const groups = [\n            [value.getHours()],\n            [value.getMinutes()]\n        ];\n\n        if(this.showSeconds) {\n            groups.push([value.getSeconds()]);\n        }\n\n        return groups;\n    }\n\n    increment(instance, offset = 0) {\n        instance.value = new Date(this.value.value.getTime() + offset + (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    decrement(instance, offset = 0) {\n        instance.value = new Date(this.value.value.getTime() - offset - (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n}\n","import TwentyFourHourClock from './TwentyFourHourClock';\n\n/**\n * @classdesc This face shows the current time in twelve hour format, with AM\n *     and PM.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class TwelveHourClock extends TwentyFourHourClock {\n\n    defaultAttributes() {\n        return {\n            showLabels: false,\n            showSeconds: true,\n            showMeridium: true\n        };\n    }\n\n    format(instance, value) {\n        if(!value) {\n            value = new Date;\n        }\n\n        const hours = value.getHours();\n\t\tconst groups = [\n\t\t\thours > 12 ? hours - 12 : (hours === 0 ? 12 : hours),\n\t\t\tvalue.getMinutes()\n\t\t];\n\n        this.meridium = hours > 12 ? 'pm' : 'am';\n\n\t\tif(this.showSeconds) {\n\t\t\tgroups.push(value.getSeconds());\n\t\t}\n\n\t\treturn groups;\n    }\n\n}\n","import DayCounter from './DayCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows weeks, days,\n *     hours, minutes, and seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class WeekCounter extends DayCounter {\n\n    format(instance, value) {\n        const now = !instance.timer.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getWeeks(a, b)],\n            [this.getDays(a, b)],\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)])\n        }\n\n        return data;\n    }\n\n    getWeeks(a, b) {\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60 / 24 / 7);\n    }\n\n    getDays(a, b) {\n        return Math.abs(super.getDays(a, b) % 7);\n    }\n\n}\n","import WeekCounter from './WeekCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows years, weeks,\n *     days, hours, minutes, and seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class YearCounter extends WeekCounter {\n\n    format(instance, value) {\n        const now = !instance.timer.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getYears(a, b)],\n            [this.getWeeks(a, b)],\n            [this.getDays(a, b)],\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)])\n        }\n\n        return data;\n    }\n\n    getYears(a, b) {\n        return Math.floor(Math.max(0, this.getTotalSeconds(a, b) / 60 / 60 / 24 / 7 / 52));\n    }\n\n    getWeeks(a, b) {\n        return Math.abs(super.getWeeks(a, b) % 52);\n    }\n\n}\n","import { Counter } from '../Faces';\nimport { Original } from '../Themes';\nimport { English } from '../Languages';\n\n/**\n * @alias DefaultValues\n * @type {object}\n * @memberof module:Config/DefaultValues\n */\nexport default {\n    face: Counter,\n    theme: Original,\n    language: English\n};\n","import Divider from './Divider';\nimport FlipClock from './FlipClock';\nimport Group from './Group';\nimport Label from './Label';\nimport List from './List';\nimport ListItem from './ListItem';\nimport * as faces from './Faces';\n\nexport default {\n    Divider,\n    FlipClock,\n    Group,\n    Label,\n    List,\n    ListItem,\n    faces\n};\n","import Face from './Face';\nimport List from './List';\nimport Group from './Group';\nimport Label from './Label';\nimport Timer from './Timer';\nimport Divider from './Divider';\nimport * as Faces from '../Faces';\nimport FaceValue from './FaceValue';\nimport DomComponent from './DomComponent';\nimport validate from '../Helpers/Validate';\nimport DefaultValues from '../Config/DefaultValues';\nimport ConsoleMessages from '../Config/ConsoleMessages';\nimport { flatten, isNull, isString, isObject, isUndefined, isFunction, error } from '../Helpers/Functions';\n\nexport default class FlipClock extends DomComponent {\n\n    /**\n     * Create a new `FlipClock` instance.\n     *\n     * @class FlipClock\n     * @extends DomComponent\n     * @param {HTMLElement} el - The HTML element used to bind clock DOM node.\n     * @param {*} value - The value that is passed to the clock face.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(el, value, attributes) {\n        if(!validate(el, HTMLElement)) {\n            error(ConsoleMessages.element);\n        }\n\n        if(isObject(value) && !attributes) {\n            attributes = value;\n            value = undefined;\n        }\n\n        const face = attributes.face || DefaultValues.face;\n\n        delete attributes.face;\n\n        super(Object.assign({\n            originalValue: value,\n            theme: DefaultValues.theme,\n            language: DefaultValues.language,\n            timer: Timer.make(attributes.interval || 1000),\n        }, attributes));\n\n        if(!this.face) {\n            this.face = face;\n        }\n\n        this.mount(el);\n    }\n\n    /**\n     * Get the clock `Face`.\n     *\n     * @return {Face} The `face` attribute.\n     */\n    get face() {\n        return this.$face;\n    }\n\n    /**\n     * Sets the clock `Face`.\n     *\n     * @param  {Function|Face|string} value - The `Face` value.\n     * @return {void}\n     */\n    set face(value) {\n        if(!validate(value, [Face, 'string', 'function'])) {\n            error(ConsoleMessages.face);\n        }\n\n        this.$face = (Faces[value] || value).make(Object.assign(this.getPublicAttributes(), {\n            originalValue: this.face ? this.face.originalValue : undefined\n        }));\n\n        this.$face.initialized(this);\n\n        if(this.value) {\n            this.$face.value = this.face.createFaceValue(this, this.value.value);\n        }\n        else if(!this.value) {\n            this.value = this.originalValue;\n        }\n\n        this.el && this.render();\n    }\n\n    /**\n     * Get the `stopAt` attribute.\n     *\n     * @return {*} The `stopAt` value.\n     */\n    get stopAt() {\n        return isFunction(this.$stopAt) ? this.$stopAt(this) : this.$stopAt;\n    }\n\n    /**\n     * Set the `stopAt` attribute.\n     *\n     * @param  {*} value - The `stopAt` value.\n     * @return {void}\n     */\n    set stopAt(value) {\n        this.$stopAt = value;\n    }\n\n    /**\n     * Get the `Timer` instance.\n     *\n     * @return {Timer} The `timer` attribute.\n     */\n    get timer() {\n        return this.$timer;\n    }\n\n    /**\n     * Set the `Timer` instance.\n     *\n     * @param  {Timer} timer - The `timer` attribute.\n     * @return {void}\n     */\n    set timer(timer) {\n        if(!validate(timer, Timer)) {\n            error(ConsoleMessages.timer);\n        }\n\n        this.$timer = timer;\n    }\n\n    /**\n     * Helper method to get the clock's `FaceValue` instance.\n     *\n     * @return {FaceValue|null} The `FaceValue` if set, otherwise `null`.\n     */\n    get value() {\n        return this.face ? this.face.value : null;\n    }\n\n    /**\n     * Helper method to set the clock's `FaceValue` instance.\n     *\n     * @param  {*} value - The `value` attribute.\n     * @return {void}\n     */\n    set value(value) {\n        if(!this.face) {\n            throw new Error('A face must be set before setting a value.')\n        }\n\n        if(value instanceof FaceValue) {\n            this.face.value = value;\n        }\n        else if(this.value) {\n            this.face.value = this.face.value.clone(value);\n        }\n        else {\n            this.face.value = this.face.createFaceValue(this, value);\n        }\n\n        this.el && this.render();\n    }\n\n    /**\n     * Get the original value attribute.\n     *\n     * @return {*} - The `originalValue` attribute.\n     */\n    get originalValue() {\n        if(isFunction(this.$originalValue) && !this.$originalValue.name) {\n            return this.$originalValue();\n        }\n\n        if(!isUndefined(this.$originalValue) && !isNull(this.$originalValue)) {\n            return this.$originalValue;\n        }\n\n        return this.face ? this.face.defaultValue() : undefined;\n    }\n\n    /**\n     * Set the original value attribute.\n     *\n     * @param  {*} value - The `originalValue` attribute.\n     * @return {void}\n     */\n    set originalValue(value) {\n        this.$originalValue = value;\n    }\n\n    /**\n     * Mount the clock to the parent DOM element.\n     *\n     * @param {HTMLElement} el - The parent `HTMLElement`.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    mount(el) {\n        super.mount(el);\n\n        this.face.mounted(this);\n\n        return this;\n    }\n\n    /**\n     * Render the clock's DOM nodes.\n     *\n     * @return {HTMLElement} The parent `HTMLElement`.\n     */\n    render() {\n        // Call the parent render function\n        super.render();\n\n        // Check to see if the face has a render function defined in the theme.\n        // This allows a face to completely re-render or add to the theme.\n        // This allows face specific interfaces for a theme.\n        if(this.theme.faces[this.face.name]) {\n            this.theme.faces[this.face.name](this.el, this);\n        }\n\n        // Pass the clock instance to the rendered() function on the face.\n        // This allows global modifications to the rendered templates not\n        // theme specific.\n        this.face.rendered(this);\n\n        // Return the rendered `HTMLElement`.\n        return this.el;\n    }\n\n    /**\n     * Start the clock.\n     *\n     * @param  {Function} fn - The interval callback.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    start(fn) {\n        if(!this.timer.started) {\n            this.value = this.originalValue;\n        }\n\n        isUndefined(this.face.stopAt) && (this.face.stopAt = this.stopAt);\n        isUndefined(this.face.originalValue) && (this.face.originalValue = this.originalValue);\n\n        this.timer.start(() => {\n            this.face.interval(this, fn)\n        });\n\n        this.face.started(this);\n\n        return this.emit('start');\n    }\n\n    /**\n     * Stop the clock.\n     *\n     * @param  {Function} fn - The stop callback.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    stop(fn) {\n        this.timer.stop(fn);\n        this.face.stopped(this);\n\n        return this.emit('stop');\n    }\n\n    /**\n     * Reset the clock to the original value.\n     *\n     * @param  {Function} fn - The interval callback.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    reset(fn) {\n        this.value = this.originalValue;\n        this.timer.reset(() => this.interval(this, fn));\n        this.face.reset(this);\n\n        return this.emit('reset');\n    }\n\n    /**\n     * Helper method to increment the clock's value.\n     *\n     * @param  {*|undefined} value - Increment the clock by the specified value.\n     *     If no value is passed, then the default increment is determined by\n     *     the Face, which is usually `1`.     *\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    increment(value) {\n        this.face.increment(this, value);\n\n        return this;\n    }\n\n    /**\n     * Helper method to decrement the clock's value.\n     *\n     * @param  {*|undefined} value - Decrement the clock by the specified value.\n     *     If no value is passed, then the default decrement is determined by\n     *     the `Face`, which is usually `1`.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    decrement(value) {\n        this.face.decrement(this, value);\n\n        return this;\n    }\n\n    /**\n     * Helper method to instantiate a new `Divider`.\n     *\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `Divider` instance.\n     * @return {Divider} - The instantiated Divider.\n     */\n    createDivider(attributes) {\n        return Divider.make(Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Helper method to instantiate a new `List`.\n     *\n     * @param  {*} value - The `List` value.\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `List` instance.\n     * @return {List} - The instantiated `List`.\n     */\n    createList(value, attributes) {\n        return List.make(value, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Helper method to instantiate a new `Label`.\n     *\n     * @param  {*} value - The `Label` value.\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `Label` instance.\n     * @return {Label} - The instantiated `Label`.\n     */\n    createLabel(value, attributes) {\n        return Label.make(value, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Helper method to instantiate a new `Group`.\n     *\n     * @param  {array} items - An array of `List` items to group.\n     * @param  {Group|undefined} [attributes] - The attributes passed to the\n     *     `Group` instance.\n     * @return {Group} - The instantiated `Group`.\n     */\n    createGroup(items, attributes) {\n        return Group.make(items, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Get the global default values.\n     *\n     * @return {object}\n     */\n    static get defaults() {\n        return DefaultValues;\n    }\n\n    /**\n     * Helper method to set the default `Face` value.\n     *\n     * @param  {Face} value - The default `Face` class.This should be a\n     *     constructor.\n     * @return {void}\n     */\n    static setDefaultFace(value) {\n        if(!validate(value, Face)) {\n            error(ConsoleMessages.face);\n        }\n\n        DefaultValues.face = value;\n    }\n\n    /**\n     * Helper method to set the default theme.\n     *\n     * @param {object} value - The default theme.\n     * @return {void}\n     */\n    static setDefaultTheme(value) {\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.theme);\n        }\n\n        DefaultValues.theme = value\n    }\n\n    /**\n     * Helper method to set the default language.\n     *\n     * @param {object} value - The default language.\n     * @return {void}\n     */\n    static setDefaultLanguage(value) {\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.language);\n        }\n\n        DefaultValues.language = value;\n    }\n\n}\n"],"names":["error","string","Error","callback","fn","isFunction","args","call","this","round","value","isNegativeZero","isNegative","Math","ceil","floor","toString","noop","isUndefined","isNull","chain","before","after","concatMap","x","map","reduce","y","concat","flatten","deepFlatten","Array","isArray","length","Infinity","isConstructor","Function","name","isString","isObject","type","isNumber","isNaN","kebabCase","replace","toLowerCase","digitize","options","prepend","number","prependLeadingZero","split","Object","assign","minimumDigits","digits","arr","min","i","unshift","format","parseFloat","findRange","char","RANGES","code","charCodeAt","max","stringFromCharCodeBy","String","fromCharCode","next","range","join","prev","validate","success","forEach","arg","_typeof","language","LANGUAGES","values","find","aliases","indexOf","translate","from","lang","dictionary","swap","subject","existing","parentNode","replaceChild","setAttributes","el","attributes","setAttribute","appendChildren","children","filter","child","HTMLElement","appendChild","createElement","document","innerHTML","instance","index","childNodes","querySelector","group","groupEl","querySelectorAll","lists","listValue","createList","domValue","countdown","animationRate","face","delay","createGroup","render","items","item","t","label","beforeValue","classList","add","style","animationDelay","animationDuration","createListItem","active","className","createDivider","mount","showSeconds","showLabels","createLabel","TwentyFourHourClock","showMeridium","meridium","parent","Component","events","key","event","apply","_this","push","_this2","off","on","hasOwnProperty","getOwnPropertyNames","_this3","getAttribute","keys","getAttributes","match","obj","_this4","constructor","$events","FaceValue","getPublicAttributes","$digits","$value","theme","date","element","faceValue","timer","Face","undefined","autoStart","defaultAttributes","defaultValue","decrement","increment","shouldStop","stop","emit","stopAt","amount","isStopped","window","requestAnimationFrame","start","make","defaultDataType","createFaceValue","$stopAt","$originalValue","DomComponent","insertBefore","$el","ConsoleMessages","$parent","$theme","$language","Divider","ListItem","List","$items","Group","Label","Timer","interval","count","handle","started","running","Date","lastLoop","now","loop","isRunning","setTimeout","cancelAnimationFrame","getTime","Counter","MinuteCounter","diff","originalValue","getMinutes","getSeconds","a","b","getTotalSeconds","totalSeconds","abs","HourCounter","data","getHours","_get","DayCounter","getDays","groups","offset","TwelveHourClock","hours","WeekCounter","getWeeks","YearCounter","getYears","FlipClock","faces","English","DefaultValues","mounted","rendered","stopped","reset","$face","Faces","initialized","$timer","clone"],"mappings":"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,gBACA,kBACA,WAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACA,cACA,aACA,aACA,gBACA,kBACA,YAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACA,aACA,WACA,YACA,eACA,gBACA,SAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACA,gBACA,iBACA,eACA,iBACA,oBACA,YAQAL,GAAW,KAAM,QAAS,qDCd1BK,SACG,aACA,YACA,cACA,iBACA,kBACA,YAQHL,GAAW,KAAM,QAAS,oDCd1BK,SACA,cACA,YACA,aACA,eACA,eACA,SAQAL,GAAW,KAAM,QAAS,oDCd1BK,SACA,YACG,aACA,YACA,cACA,eACA,aAQHL,GAAW,KAAM,QAAS,uDCd1BK,SACA,cACA,YACA,eACA,cACA,iBACA,WAQAL,GAAW,KAAM,QAAS,oDCd1BK,SACA,WACA,SACA,UACA,YACA,YACA,KAQAL,GAAW,KAAM,QAAS,sDCd1BK,SACA,WACA,SACA,UACA,YACA,YACA,KAQAL,GAAW,KAAM,QAAS,oDCd1BK,SACG,cACA,cACA,eACA,kBACA,kBACA,YAQHL,GAAW,KAAM,QAAS,qDCd1BK,SACG,eACA,eACA,cACA,eACA,kBACA,YAQHL,IAAW,KAAM,QAAS,qDCd1BK,UACA,YACA,eACA,cACA,gBACA,mBACA,YAQAL,IAAW,KAAM,KAAM,QAAS,0DCdhCK,UACA,aACA,gBACA,YACA,kBACA,iBACA,WAQAL,IAAW,KAAM,QAAS,uDCd1BK,UACA,cACA,aACA,aACA,gBACA,kBACA,YAQAL,IAAW,KAAM,QAAS,2DCd1BK,UACH,aACC,YACF,aACC,cACE,iBACA,YAQCL,IAAW,KAAM,QAAS,uDCd1BK,UACG,aACA,eACA,aACA,gBACA,gBACA,UAQHL,IAAW,KAAM,QAAS,wDCd1BK,UACA,cACA,eACA,YACA,iBACA,iBACA,WAQAL,IAAW,KAAM,QAAS,uDCd1BK,UACA,YACA,eACA,cACA,iBACA,kBACA,YAQAL,IAAW,KAAM,QAAS,wDCd1BK,UACA,YACA,aACA,YACA,kBACA,eACA,UAQAL,IAAW,KAAM,QAAS,qDCd1BK,UACA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"}